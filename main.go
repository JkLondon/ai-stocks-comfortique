package main

import (
	"log"
	"os"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ (–ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è, UTC+3)
const (
	DAILY_HOUR    = 10 // 10 —É—Ç—Ä–∞ –ø–æ –ú–æ—Å–∫–≤–µ
	DAILY_MINUTE  = 0
	ADMIN_USER_ID = 449066543 // ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –±–æ—Ç–∞
)

func main() {
	// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
	botToken := os.Getenv("TELEGRAM_BOT_TOKEN")
	if botToken == "" {
		log.Fatal("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN")
	}

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
	bot, err := tgbotapi.NewBotAPI(botToken)
	if err != nil {
		log.Panic(err)
	}

	log.Printf("–ë–æ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫ %s", bot.Self.UserName)

	// –°–æ–∑–¥–∞–µ–º AI —Å–µ—Ä–≤–∏—Å
	aiService := NewAIService()

	// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := bot.GetUpdatesChan(u)

	// –ö–∞–Ω–∞–ª –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
	dailyTicker := scheduleDaily(DAILY_HOUR, DAILY_MINUTE)

	// –°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)
	subscribedChats := make(map[int64]bool)

	// –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
	for {
		select {
		case update := <-updates:
			// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
			if update.Message != nil {
				log.Printf("[%s] %s", update.Message.From.UserName, update.Message.Text)
				handleMessage(bot, update.Message, subscribedChats, aiService)
			}
		case <-dailyTicker:
			// –û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
			sendDailyAnalytics(bot, subscribedChats, aiService)
		}
	}
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
func handleMessage(bot *tgbotapi.BotAPI, message *tgbotapi.Message, subscribedChats map[int64]bool, aiService *AIService) {
	chatID := message.Chat.ID
	userID := message.From.ID

	// –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
	isAdmin := userID == ADMIN_USER_ID

	// –î–ª—è –∫–æ–º–∞–Ω–¥, –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
	switch message.Text {
	case "/start":
		// –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
		welcomeText := `–ü—Ä–∏–≤–µ—Ç! üëã –Ø —Ç–≤–æ–π –º–∏–ª—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º! üíñ

–Ø –±—É–¥—É –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 10:00 –ø–æ –ú–æ—Å–∫–≤–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–±–µ –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø–æ —Ä–æ—Å—Å–∏–π—Å–∫–æ–º—É —Ä—ã–Ω–∫—É —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –∫—É–¥–∞ –≤–ª–æ–∂–∏—Ç—å 1000 —Ä—É–±–ª–µ–π! üí∞

–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã:
/subscribe - –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É üìä
/unsubscribe - –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ üö´
/analytics - –ø–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å ‚ú®`

		if isAdmin {
			welcomeText += "\n\nüîê –í—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –±–æ—Ç–∞ –∏ –∏–º–µ–µ—Ç–µ –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º!"
		}

		msg := tgbotapi.NewMessage(chatID, welcomeText)
		bot.Send(msg)
		return
	}

	// –î–ª—è –∫–æ–º–∞–Ω–¥, –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
	if !isAdmin {
		msg := tgbotapi.NewMessage(chatID, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ —ç—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –±–æ—Ç–∞! üîí")
		bot.Send(msg)
		return
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
	switch message.Text {
	case "/subscribe":
		// –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É
		subscribedChats[chatID] = true
		msg := tgbotapi.NewMessage(chatID, "–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É! üéâ –û–∂–∏–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –≤—ã–ø—É—Å–∫ –≤ 10:00 –ø–æ –ú–æ—Å–∫–≤–µ! üíñ")
		bot.Send(msg)

	case "/unsubscribe":
		// –û—Ç–ø–∏—Å–∫–∞ –æ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
		delete(subscribedChats, chatID)
		msg := tgbotapi.NewMessage(chatID, "–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ üò¢ –ë—É–¥–µ–º —Å–∫—É—á–∞—Ç—å! üíî")
		bot.Send(msg)

	case "/analytics":
		// –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É
		msg := tgbotapi.NewMessage(chatID, "–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ... ‚è≥")
		sentMsg, _ := bot.Send(msg)

		analytics, err := aiService.GenerateAnalytics()
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: %v", err)
			errorMsg := tgbotapi.NewMessage(chatID, "–ò–∑–≤–∏–Ω–∏, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ üò¢ –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ! üíï")
			bot.Send(errorMsg)
			return
		}

		// –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–∞–º–µ–Ω—è—è –µ–≥–æ –Ω–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫—É
		editMsg := tgbotapi.NewEditMessageText(chatID, sentMsg.MessageID, analytics)
		editMsg.ParseMode = "Markdown"
		bot.Send(editMsg)

	default:
		// –û—Ç–≤–µ—Ç –Ω–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—É—é –∫–æ–º–∞–Ω–¥—É
		msg := tgbotapi.NewMessage(chatID, "–ü—Ä–æ—Å—Ç–∏, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É ü•∫ –ò—Å–ø–æ–ª—å–∑—É–π /start —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥! üíï")
		bot.Send(msg)
	}
}

// –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞—á
func scheduleDaily(hour, minute int) <-chan time.Time {
	ticker := make(chan time.Time)

	go func() {
		for {
			// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –ú–æ—Å–∫–≤–µ (UTC+3)
			loc, _ := time.LoadLocation("Europe/Moscow")
			if loc == nil {
				// –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é, –∏—Å–ø–æ–ª—å–∑—É–µ–º UTC+3 –≤—Ä—É—á–Ω—É—é
				loc = time.FixedZone("MSK", 3*60*60)
			}
			now := time.Now().In(loc)

			// –í—ã—á–∏—Å–ª—è–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞
			nextRun := time.Date(now.Year(), now.Month(), now.Day(), hour, minute, 0, 0, loc)
			if now.After(nextRun) {
				// –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å
				nextRun = nextRun.Add(24 * time.Hour)
			}

			// –û–∂–∏–¥–∞–Ω–∏–µ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
			waitDuration := nextRun.Sub(now)
			log.Printf("–°–ª–µ–¥—É—é—â–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —á–µ—Ä–µ–∑ %s", waitDuration)

			timer := time.NewTimer(waitDuration)
			<-timer.C

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –≤ –∫–∞–Ω–∞–ª
			ticker <- time.Now()
		}
	}()

	return ticker
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
func sendDailyAnalytics(bot *tgbotapi.BotAPI, subscribedChats map[int64]bool, aiService *AIService) {
	log.Printf("–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ %d –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º", len(subscribedChats))

	analytics, err := aiService.GenerateAnalytics()
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: %v", err)
		return
	}

	for chatID := range subscribedChats {
		msg := tgbotapi.NewMessage(chatID, analytics)
		msg.ParseMode = "Markdown"
		_, err := bot.Send(msg)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %d: %v", chatID, err)
		}
	}
}
